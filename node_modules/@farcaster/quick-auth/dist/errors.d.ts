export type GlobalErrorType<name extends string = 'Error'> = Error & {
    name: name;
};
export declare class BaseError<cause extends Error | undefined = undefined> extends Error {
    details: string;
    shortMessage: string;
    cause: cause;
    name: string;
    constructor(shortMessage: string, options?: BaseError.Options<cause>);
}
export declare namespace BaseError {
    type Options<cause extends Error | undefined = Error | undefined> = {
        cause?: cause | undefined;
        details?: string | undefined;
        metaMessages?: (string | undefined)[] | undefined;
    };
}
export declare class ResponseError extends BaseError {
    readonly name = "RequestFailedError";
    constructor({ status }: {
        status: number;
    });
}
export declare class InvalidSiwfError extends BaseError {
    readonly name = "InvalidToken";
    constructor(message: string);
}
export declare class InvalidTokenError extends BaseError {
    readonly name = "InvalidToken";
    constructor(message: string);
}
export declare class InvalidParametersError extends BaseError {
    readonly name = "InvalidParameters";
    constructor(message: string);
}
