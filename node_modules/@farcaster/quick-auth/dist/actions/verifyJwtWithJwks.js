import { createRemoteJWKSet, errors, jwtVerify } from "jose";
import { InvalidTokenError } from "../errors.js";
const jwksSets = {};
const getJwksSet = (url) => {
    if (!jwksSets[url]) {
        jwksSets[url] = createRemoteJWKSet(new URL(url));
    }
    return jwksSets[url];
};
export async function verifyJwtWithJwks({ origin }, options) {
    const JWKS = getJwksSet(`${origin}/.well-known/jwks.json`);
    try {
        const { payload } = await jwtVerify(options.token, JWKS, {
            issuer: origin,
            audience: options.domain,
        });
        return payload;
    }
    catch (error) {
        if (error instanceof errors.JWTInvalid
            || error instanceof errors.JWTExpired
            || error instanceof errors.JWTClaimValidationFailed) {
            throw new InvalidTokenError(error.message);
        }
        throw error;
    }
}
