export class BaseError extends Error {
    constructor(shortMessage, options = {}) {
        const details = (() => {
            if (options.cause instanceof BaseError) {
                if (options.cause.details)
                    return options.cause.details;
                if (options.cause.shortMessage)
                    return options.cause.shortMessage;
            }
            if (options.cause &&
                'details' in options.cause &&
                typeof options.cause.details === 'string')
                return options.cause.details;
            if (options.cause?.message)
                return options.cause.message;
            return options.details;
        })();
        const message = [
            shortMessage || 'An error occurred.',
            ...(options.metaMessages ? ['', ...options.metaMessages] : []),
            ...(details
                ? [
                    '',
                    details ? `Details: ${details}` : undefined,
                ]
                : []),
        ]
            .filter((x) => typeof x === 'string')
            .join('\n');
        super(message, options.cause ? { cause: options.cause } : undefined);
        this.name = 'BaseError';
        this.cause = options.cause;
        this.details = details;
        this.shortMessage = shortMessage;
    }
}
export class ResponseError extends BaseError {
    constructor({ status }) {
        super(`Request failed with status ${status}`);
        this.name = 'RequestFailedError';
    }
}
export class InvalidSiwfError extends BaseError {
    constructor(message) {
        super(message);
        this.name = 'InvalidToken';
    }
}
export class InvalidTokenError extends BaseError {
    constructor(message) {
        super(message);
        this.name = 'InvalidToken';
    }
}
export class InvalidParametersError extends BaseError {
    constructor(message) {
        super(message);
        this.name = 'InvalidParameters';
    }
}
